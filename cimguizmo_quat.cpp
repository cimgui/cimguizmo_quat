//This file is automatically generated by generator.lua from https://github.com/cimgui/cimguizmo_quat
//based on imGuIZMOquat.h file version  XXX from https://github.com/BrutPitt/imGuIZMO.quat
#include "imgui.h"
#include "imgui_internal.h"
#include "imGuIZMOquat.h"
#include "cimguizmo_quat.h"



CIMGUI_API void imguiGizmo_buildPlane(const float size,const float thickness)
{
    return imguiGizmo::buildPlane(size,thickness);
}
CIMGUI_API void imguiGizmo_buildCube(const float size)
{
    return imguiGizmo::buildCube(size);
}
CIMGUI_API void imguiGizmo_buildPolygon(const vec3 size,ImVector_vec3* vtx,ImVector_vec3* norm)
{
    return imguiGizmo::buildPolygon(size,*vtx,*norm);
}
CIMGUI_API void imguiGizmo_buildSphere(const float radius,const int tessFactor)
{
    return imguiGizmo::buildSphere(radius,tessFactor);
}
CIMGUI_API void imguiGizmo_buildCone(const float x0,const float x1,const float radius,const int slices)
{
    return imguiGizmo::buildCone(x0,x1,radius,slices);
}
CIMGUI_API void imguiGizmo_buildCylinder(const float x0,const float x1,const float radius,const int slices)
{
    return imguiGizmo::buildCylinder(x0,x1,radius,slices);
}
CIMGUI_API void imguiGizmo_resizeAxesOf(const vec3 newSize)
{
    return imguiGizmo::resizeAxesOf(newSize);
}
CIMGUI_API void imguiGizmo_restoreAxesSize()
{
    return imguiGizmo::restoreAxesSize();
}
CIMGUI_API void imguiGizmo_resizeSolidOf(float newSize)
{
    return imguiGizmo::resizeSolidOf(newSize);
}
CIMGUI_API void imguiGizmo_restoreSolidSize()
{
    return imguiGizmo::restoreSolidSize();
}
CIMGUI_API void imguiGizmo_setDirectionColor_U32U32(ImU32 dColor,const ImU32 pColor)
{
    return imguiGizmo::setDirectionColor(dColor,pColor);
}
CIMGUI_API void imguiGizmo_setDirectionColor_Vec4Vec4(const ImVec4 dColor,const ImVec4 pColor)
{
    return imguiGizmo::setDirectionColor(dColor,pColor);
}
CIMGUI_API void imguiGizmo_setDirectionColor_U32(ImU32 color)
{
    return imguiGizmo::setDirectionColor(color);
}
CIMGUI_API void imguiGizmo_setDirectionColor_Vec4(const ImVec4 color)
{
    return imguiGizmo::setDirectionColor(color);
}
CIMGUI_API void imguiGizmo_restoreDirectionColor()
{
    return imguiGizmo::restoreDirectionColor();
}
CIMGUI_API void imguiGizmo_setSphereColors_Vec4(const ImVec4 a,const ImVec4 b)
{
    return imguiGizmo::setSphereColors(a,b);
}
CIMGUI_API void imguiGizmo_setSphereColors_U32(ImU32 a,ImU32 b)
{
    return imguiGizmo::setSphereColors(a,b);
}
CIMGUI_API void imguiGizmo_restoreSphereColors()
{
    return imguiGizmo::restoreSphereColors();
}
CIMGUI_API void imguiGizmo_setGizmoFeelingRot(float f)
{
    return imguiGizmo::setGizmoFeelingRot(f);
}
CIMGUI_API float imguiGizmo_getGizmoFeelingRot()
{
    return imguiGizmo::getGizmoFeelingRot();
}
CIMGUI_API void imguiGizmo_setPanModifier(vgModifiers v)
{
    return imguiGizmo::setPanModifier(v);
}
CIMGUI_API void imguiGizmo_setDollyModifier(vgModifiers v)
{
    return imguiGizmo::setDollyModifier(v);
}
CIMGUI_API void imguiGizmo_setDollyScale(float scale)
{
    return imguiGizmo::setDollyScale(scale);
}
CIMGUI_API float imguiGizmo_getDollyScale()
{
    return imguiGizmo::getDollyScale();
}
CIMGUI_API void imguiGizmo_setPanScale(float scale)
{
    return imguiGizmo::setPanScale(scale);
}
CIMGUI_API float imguiGizmo_getPanScale()
{
    return imguiGizmo::getPanScale();
}
CIMGUI_API bool imguiGizmo_drawFunc(imguiGizmo* self,const char* label,float size)
{
    return self->drawFunc(label,size);
}
CIMGUI_API void imguiGizmo_modeSettings(imguiGizmo* self,int mode)
{
    return self->modeSettings(mode);
}
CIMGUI_API void imguiGizmo_setDualMode(imguiGizmo* self,const int mode)
{
    return self->setDualMode(mode);
}
CIMGUI_API bool imguiGizmo_getTransforms_vec3Ptr(imguiGizmo* self,quat* q,const char* label,vec3* dir,float size)
{
    return self->getTransforms(*q,label,*dir,size);
}
CIMGUI_API bool imguiGizmo_getTransforms_vec4Ptr(imguiGizmo* self,quat* q,const char* label,vec4* axis_angle,float size)
{
    return self->getTransforms(*q,label,*axis_angle,size);
}
CIMGUI_API bool iggizmo3D_quatPtrFloat(const char* noname1,quat* noname2,float noname3,const int noname4)
{
    return ImGui::gizmo3D(noname1,*noname2,noname3,noname4);
}
CIMGUI_API bool iggizmo3D_vec4Ptr(const char* noname1,vec4* noname2,float noname3,const int noname4)
{
    return ImGui::gizmo3D(noname1,*noname2,noname3,noname4);
}
CIMGUI_API bool iggizmo3D_vec3PtrFloat(const char* noname1,vec3* noname2,float noname3,const int noname4)
{
    return ImGui::gizmo3D(noname1,*noname2,noname3,noname4);
}
CIMGUI_API bool iggizmo3D_quatPtrquatPtr(const char* noname1,quat* noname2,quat* noname3,float noname4,const int noname5)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,noname4,noname5);
}
CIMGUI_API bool iggizmo3D_quatPtrvec4Ptr(const char* noname1,quat* noname2,vec4* noname3,float noname4,const int noname5)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,noname4,noname5);
}
CIMGUI_API bool iggizmo3D_quatPtrvec3Ptr(const char* noname1,quat* noname2,vec3* noname3,float noname4,const int noname5)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,noname4,noname5);
}
CIMGUI_API bool iggizmo3D_vec3PtrquatPtrFloat(const char* noname1,vec3* noname2,quat* noname3,float noname4,const int noname5)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,noname4,noname5);
}
CIMGUI_API bool iggizmo3D_vec3Ptrvec4Ptr(const char* noname1,vec3* noname2,vec4* noname3,float noname4,const int noname5)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,noname4,noname5);
}
CIMGUI_API bool iggizmo3D_vec3Ptrvec3Ptr(const char* noname1,vec3* noname2,vec3* noname3,float noname4,const int noname5)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,noname4,noname5);
}
CIMGUI_API bool iggizmo3D_vec3PtrquatPtrquatPtr(const char* noname1,vec3* noname2,quat* noname3,quat* noname4,float noname5,const int noname6)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,*noname4,noname5,noname6);
}
CIMGUI_API bool iggizmo3D_vec3PtrquatPtrvec4Ptr(const char* noname1,vec3* noname2,quat* noname3,vec4* noname4,float noname5,const int noname6)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,*noname4,noname5,noname6);
}
CIMGUI_API bool iggizmo3D_vec3PtrquatPtrvec3Ptr(const char* noname1,vec3* noname2,quat* noname3,vec3* noname4,float noname5,const int noname6)
{
    return ImGui::gizmo3D(noname1,*noname2,*noname3,*noname4,noname5,noname6);
}


CIMGUI_API void mat4_cast( quat *q,Mat4* mat)
{
	*mat = mat4_cast(*q);
}

CIMGUI_API void mat4_pos_cast( quat *q, vec3 pos, Mat4* mat)
{
	*mat = mat4_cast(*q);
	mat->m30 = pos.x;
	mat->m31 = pos.y;
	mat->m32 = pos.z;
}

struct m16 {
    union {
        float v[16];
        struct {      float m00, m10, m20, m30,
                        m01, m11, m21, m31,
                        m02, m12, m22, m32,
                        m03, m13, m23, m33; };
    };
};

//https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/
CIMGUI_API void quat_cast(float f[16], quat *qq)
{
	m16 m = *(m16*)f;
	float qw, qx, qy, qz;
	float tr = m.m00 + m.m11 + m.m22;

	if (tr > 0) { 
	float S = sqrt(tr+1.0f) * 2.0f; // S=4*qw 
	qw = 0.25f * S;
	qx = (m.m21 - m.m12) / S;
	qy = (m.m02 - m.m20) / S; 
	qz = (m.m10 - m.m01) / S; 
	} else if ((m.m00 > m.m11)&&(m.m00 > m.m22)) { 
	float S = sqrt(1.0f + m.m00 - m.m11 - m.m22) * 2.0f; // S=4*qx 
	qw = (m.m21 - m.m12) / S;
	qx = 0.25f * S;
	qy = (m.m01 + m.m10) / S; 
	qz = (m.m02 + m.m20) / S; 
	} else if (m.m11 > m.m22) { 
	float S = sqrt(1.0f + m.m11 - m.m00 - m.m22) * 2.0f; // S=4*qy
	qw = (m.m02 - m.m20) / S;
	qx = (m.m01 + m.m10) / S; 
	qy = 0.25f * S;
	qz = (m.m12 + m.m21) / S; 
	} else { 
	float S = sqrt(1.0f + m.m22 - m.m00 - m.m11) * 2.0f; // S=4*qz
	qw = (m.m10 - m.m01) / S;
	qx = (m.m02 + m.m20) / S;
	qy = (m.m12 + m.m21) / S;
	qz = 0.25f * S;
	}
	*qq = quat(qw, qx, qy, qz);
}

CIMGUI_API void quat_pos_cast(float f[16], quat *qq, vec3 *pos)
{
	quat_cast(f,qq);
	pos->x = f[12];
	pos->y = f[13];
	pos->z = f[14];
}


